{"version":3,"sources":["logo.svg","widgets/success.svg","widgets/fail.svg","widgets/BasicInput.js","widgets/DateInput.js","widgets/TimeInput.js","widgets/Button.js","widgets/Prediction.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BasicInput","props","handleChange","bind","handleFocus","state","requiredError","formatError","event","this","setState","value","target","parent","onChangeField","id","requiredMessage","boxClass","concat","className","type","placeholder","onChange","onFocus","pattern","RegExp","test","required","Component","DateInput","dateValue","valueAsDate","day","getDate","month","getMonth","year","getFullYear","TimeInput","Button","text","executeAction","onClick","label","Prediction","message","imageSrc","prediction","allowed","sucessImg","failImg","class","src","alt","data","App","plate","date","time","dataHolders","logo","ref","c","outcomeBox","fieldId","incomeData","isValid","property","hasOwnProperty","validate","loadPrediction","appInvoker","fetch","encodeURI","then","response","json","jsonData","updateResult","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.62f886e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/success.8b4d6e74.svg\";","module.exports = __webpack_public_path__ + \"static/media/fail.e6c923f9.svg\";","import React, { Component } from 'react';\nimport '../widgets/Common.css';\n\nclass BasicInput extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.state = { requiredError: false, formatError: false };\n    }\n\n    handleChange(event) {\n        this.setState({ requiredError: false, formatError: false });\n        this.value = event.target.value;\n        this.props.parent.onChangeField(this.props.id, this.value);\n    }\n\n    handleFocus(event) {\n        this.setState({ requiredError: false, formatError: false });\n    }\n\n    render() {\n        let boxClass = \"baseInput\";\n        let requiredMessage;\n        if (this.state.requiredError) {\n            boxClass = boxClass.concat(\" requiredLine\");\n            requiredMessage = <div className=\"errorMessage\"><label>Requerido</label></div>;\n        } else if (this.state.formatError) {\n            boxClass = boxClass.concat(\" requiredLine\");\n            requiredMessage = <div className=\"errorMessage\"><label>Invalid format ej: PKL 2245</label></div>;\n        }\n        return (\n            <div className=\"controlContainer\">\n                <input className={boxClass} type=\"text\"\n                    placeholder={this.props.placeholder}\n                    onChange={this.handleChange}\n                    onFocus={this.handleFocus} />\n                {requiredMessage}\n            </div>\n        )\n    }\n\n    validate() {\n        if (this.value) {\n            if (this.value && this.props.pattern) {\n                let regExpPattern = new RegExp(\"^\" + this.props.pattern)\n                if (!regExpPattern.test(this.value)) {\n                    this.setState({ formatError: true });\n                    return false;\n                }\n            }\n        } else if (this.props.required) {\n            this.setState({ requiredError: true });\n            return false;\n        }\n        return true;\n    }\n}\n\nexport default BasicInput;","import React, { Component } from 'react';\nimport '../widgets/Common.css';\n\nclass DateInput extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.state = { requiredError: false };\n    }\n\n    handleChange(event) {\n        var dateValue = event.target.valueAsDate;\n        if (dateValue) {\n            this.setState({ requiredError: false });\n            var day = dateValue.getDate() + 1;\n            var month = dateValue.getMonth() + 1;;\n            var year = dateValue.getFullYear();\n            this.value = day + \"-\" + month + \"-\" + year;\n            this.props.parent.onChangeField(this.props.id, this.value);\n        }\n    }\n\n    handleFocus(event) {\n        this.setState({ requiredError: false, formatError: false });\n    }\n\n    render() {\n        let boxClass = \"baseInput\";\n        let requiredMessage;\n        if (this.state.requiredError) {\n            boxClass = boxClass.concat(\" requiredLine\");\n            requiredMessage = <div className=\"errorMessage\"><label>Requerido</label></div>;\n        }\n        return (\n            <div className=\"controlContainer\">\n                <input className={boxClass} type=\"date\"\n                    placeholder={this.props.placeholder}\n                    onChange={this.handleChange}\n                    onFocus={this.handleFocus} />\n                {requiredMessage}\n            </div>\n        )\n    }\n\n    validate() {\n        if (this.props.required && !this.value) {\n            this.setState({ requiredError: true });\n            return false;\n        }\n        return true;\n    }\n}\n\nexport default DateInput;\n","import React, { Component } from 'react';\nimport '../widgets/Common.css';\n\nclass TimeInput extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.state = { requiredError: false };\n    }\n\n    handleChange(event) {\n        this.setState({ requiredError: false });\n        this.value = event.target.value;\n        this.props.parent.onChangeField(this.props.id, this.value );\n    }\n\n    handleFocus(event) {\n        this.setState({ requiredError: false, formatError: false });\n    }\n\n    render() {\n        let boxClass = \"baseInput\";\n        let requiredMessage;\n        if (this.state.requiredError) {\n            boxClass = boxClass.concat(\" requiredLine\");\n            requiredMessage = <div className=\"errorMessage\"><label>Requerido</label></div>;\n        }\n        return (\n            <div className=\"controlContainer\">\n                <input className={boxClass} type=\"time\"\n                    placeholder={this.props.placeholder}\n                    onChange={this.handleChange}\n                    onFocus={this.handleFocus} />\n                    {requiredMessage}\n            </div>\n        )\n    }\n\n    validate() {\n        if (this.props.required && !this.value) {\n            this.setState({ requiredError: true });\n            return false;\n        }\n        return true;\n    }\n}\n\nexport default TimeInput;","import React, { Component } from 'react';\nimport '../widgets/Button.css';\n\nclass Button extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        const text = event.target.value;\n        this.props.parent.executeAction(this.props.id, text);\n    }\n\n    render() {\n        return (\n        <button className=\"app-button\" onClick={this.handleChange}>{this.props.label}</button>\n        )\n    }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport sucessImg from './success.svg';\nimport failImg from './fail.svg';\nimport '../widgets/Prediction.css';\n\nclass Prediction extends Component {\n\n    render() {\n        var message;\n        var imageSrc;\n        var boxClass;\n        if (this.state && this.state.prediction) {\n            boxClass = 'visible-result';\n            if (this.state.prediction.allowed) {\n                imageSrc = sucessImg;\n                message = 'Congrats, let\\'s drive';\n            } else {\n                imageSrc = failImg;\n                message = 'Sorry, take a buss';\n            }\n            //message = this.state.prediction.message;\n        } else {\n            boxClass = 'hidden-result';\n        }\n        return (\n            <div className={boxClass}>\n                <div class=\"item-container\">\n                    <img src={imageSrc} alt=\"resultado\" className=\"image-result\" />\n                </div>\n                <div>\n                    <label className=\"label-result\">{message}</label>\n                </div>\n            </div>\n        )\n    }\n\n    updateResult(data) {\n        this.setState({ prediction: data });\n    }\n}\n\nexport default Prediction;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport BaseInput from './widgets/BasicInput';\nimport DateInput from './widgets/DateInput';\nimport TimeInput from './widgets/TimeInput';\nimport Button from './widgets/Button';\nimport Prediction from './widgets/Prediction';\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      plate: \"\",\n      date: \"\",\n      time: \"\"\n    };\n    this.dataHolders = {};\n  }\n\n  render() {\n    this.dataHolders = [];\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>We know if are allowed to drive.</p>\n        </header>\n        <div className=\"App-result\">\n          <Prediction ref={c => (this.outcomeBox = c)}/>\n        </div>\n        <div className=\"App-body\">\n          <div className=\"dataContainer\">\n            <BaseInput placeholder=\"Plate number\" parent={this} value={this.state.plate} id=\"plate\"\n              pattern=\"[A-Za-z]{3} [0-9]{3,4}\" required=\"true\" ref={c => (this.dataHolders[\"plate\"] = c)} />\n            <DateInput parent={this} value={this.state.date} id=\"date\" required=\"true\" ref={c => (this.dataHolders[\"date\"] = c)} />\n            <TimeInput parent={this} value={this.state.time} id=\"time\" required=\"true\" ref={c => (this.dataHolders[\"time\"] = c)} />\n            <Button label=\"Predict\" parent={this} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  onChangeField(fieldId, value) {\n    let incomeData = {};\n    incomeData[fieldId] = value;\n    this.setState(incomeData);\n  }\n\n  executeAction() {\n    var isValid = true;\n    for (var property in this.dataHolders) {\n      if (this.dataHolders.hasOwnProperty(property)) {\n        if (isValid) {\n          isValid = this.dataHolders[property].validate();\n        } else {\n          break;\n        }\n      }\n    }\n    if (isValid) {\n      this.loadPrediction();\n    }\n  }\n\n  loadPrediction() {\n\n    var appInvoker = this;\n    fetch(encodeURI('/predict?plate=' + this.state.plate\n      + '&date=' + this.state.date\n      + '&time=' + this.state.time))\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (jsonData) {\n        appInvoker.outcomeBox.updateResult(jsonData);\n      });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}